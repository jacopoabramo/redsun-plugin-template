from typing import TYPE_CHECKING

from sunflare.engine.bluesky import (
    {{ plugin_base }}
)

from .config import MyDetectorInfo

if TYPE_CHECKING:

class {{ class_baseline }}({{ plugin_base }}):
    def __init__(self, name: str, model_info: 'MyDetectorInfo') -> None:

        # if you want to use default values,
        # delete all parameters after "exposure"
        super().__init__(name, model_info)

    def shutdown(self) -> None:
        """Shutdown the detector.

        Optional method.
        Implement this to for graceful shutdown.
        """
        ...

    def stage(self) -> Status:
        """Set up the device for acquisition.

        It should return a ``Status`` that is marked done when the device is
        done staging.
        """
        raise NotImplementedError()

    def unstage(self) -> Status:
        """Disables device.

        It should return a ``Status`` that is marked done when the device is finished
        unstaging.
        """
        raise NotImplementedError()

    def describe(self) -> OrderedDict[str, DataKey]:
        """Return an OrderedDict with exactly the same keys as the ``read`` method, here mapped to per-scan metadata about each field.

        A base example of a return value is shown below:

        .. code-block:: python

            OrderedDict(('channel1',
                         {'source': 'XF23-ID:SOME_PV_NAME',
                          'dtype': 'number',
                          'shape': []}),
                        ('channel2',
                         {'source': 'XF23-ID:SOME_PV_NAME',
                          'dtype': 'number',
                          'shape': []}))

        For a more detailed description, see the ``DataKey`` class.
        """
        raise NotImplementedError()

    def read(self) -> OrderedDict[str, Reading[Any]]:
        """Return an OrderedDict mapping string field name(s) to dictionaries of values and timestamps and optional per-point metadata.

        Example return value:

        .. code-block:: python

            OrderedDict(('channel1',
                         {'value': 5, 'timestamp': 1472493713.271991}),
                         ('channel2',
                         {'value': 16, 'timestamp': 1472493713.539238}))

        For a more detailed description, see the ``Reading`` class.
        """
        raise NotImplementedError()

    def pause(self) -> None:
        """Perform device-specific work when the RunEngine pauses."""
        raise NotImplementedError()

    def resume(self) -> None:
        """Perform device-specific work when the RunEngine resumes after a pause."""
        raise NotImplementedError()

    def kickoff(self) -> Status:
        """Start the device for asynchronous acquisition.

        Returns a ``Status`` that is marked done when the device is finished
        starting.
        """
        raise NotImplementedError()

    def complete(self) -> Status:
        """Wait for the device to complete.

        Returns ``Status`` that is marked done when the device is finished
        completing.
        """
        raise NotImplementedError()

    def read_configuration(self) -> OrderedDict[str, Reading[Any]]:
        """Provide same API as ``read`` but for slow-changing fields related to configuration.

        Example: exposure time. These will typically be read only once per run.
        """
        raise NotImplementedError()

    def describe_configuration(self) -> OrderedDict[str, DataKey]:
        """Provide same API as ``describe``, but corresponding to the keys in ``read_configuration``."""
        raise NotImplementedError()
